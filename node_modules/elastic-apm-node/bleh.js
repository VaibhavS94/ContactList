require('./').start({
  serviceName: 'test',
  metricsInterval: 10
})

const crypto = require('crypto')
const http = require('http')
const express = require('express')
const app = express()

app.get('/hello/:name', (req, res) => {
  res.json({
    hashed: crypto.pbkdf2Sync(req.params.name, 'salt', 100000, 64, 'sha512')
  })
})

const server = http.createServer(app)

server.listen(3000, () => {
  const { port } = server.address()
  const url = `http://localhost:${port}/hello/world`
  pingLoop(url)
})

function sleep (ms) {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, ms)
  })
}

async function pingLoop (url, parallel = 10, pause = 10) {
  while (true) {
    const tasks = []
    for (let i = 0; i < parallel; i++) {
      tasks.push(ping(url))
    }
    try {
      await Promise.all(tasks)
    } catch (err) {
      console.error(err.stack)
    }
    await sleep(pause)
  }
}

function ping (url) {
  return new Promise((resolve, reject) => {
    const req = http.get(url, res => {
      const chunks = []
      res.on('error', reject)
      res.on('data', chunks.push.bind(chunks))
      res.on('end', () => {
        resolve(Buffer.concat(chunks))
      })
    })
    req.on('error', reject)
  })
}
